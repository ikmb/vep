params {

    outdir = "results"

    help = false

    vep_options = "--hgvs --af_gnomadg --per_gene --sift p --polyphen p --check_existing --canonical"

    run_name = false

    assembly = "GRCh38"

    plaintext_email = false

    logo = "${baseDir}/assets/ikmblogo.png"

    email = null

    dbnsfp_db = null
    dbnsfp_fields = "DANN_score,M-CAP_pred,REVEL_score"
    spliceai_fields = null
    dbscsnv_db = null
    cadd_snps = null
    cadd_indels = null
    vep_mastermind = null
    vep_cache_dir = null
    vep_plugin_dir = null

    max_memory = 128.GB
    max_cpus = 16
    max_time = 240.h
    maxMultiqcEmailFileSize = 25.MB

}

manifest {
    name = "ikmb/vep"
    version = "2.0"
    description = "VEP Pipeline"
    author = "Marc Hoeppner"
    homePage = "https://github.com/ikmb/vep"
    nextflowVersion = "22.04.0"
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
        enabled = true
        file = "${params.outdir}/pipeline_info/pipeline_timeline.html"
}
report {
        enabled = true
        file = "${params.outdir}/pipeline_info/pipeline_report.html"
}
trace {
        enabled = true
        file = "${params.outdir}/pipeline_info/pipeline_trace.txt"
}
dag {
        enabled = true
        file = "${params.outdir}/pipeline_info/pipeline_dag.svg"
}

profiles {
    standard {
        includeConfig 'conf/medcluster.config'
        includeConfig 'conf/base.config'
    includeConfig 'conf/resources.config'
    }
    diagnostic {
        includeConfig 'conf/diagnostic.config'
    includeConfig 'conf/base.config'
    includeConfig 'conf/resources.config'
    }
    test {
        includeConfig 'conf/test.config'
        includeConfig 'conf/base.config'
    includeConfig 'conf/resources.config'
  }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
